steps:
  # Temporarily disable kaniko cache approach due to unexpected build errors.
  #
  # build docker image for target sub-pacakge
  # use debug tag so that we can use `sh` entrypoint
  #- name: 'gcr.io/kaniko-project/executor:debug'
  #  id: Build Image
  #  entrypoint: 'sh'
  #  args:
  #    - '-c'
  #    - |
  #      cp yarn.lock packages/$_TARGET_PACKAGE
  #      cd packages/$_TARGET_PACKAGE
  #      /kaniko/executor --context="$(pwd)" --cache=true --cache-ttl=48h --destination=gcr.io/$PROJECT_ID/$_IMAGE_NAME:${BRANCH_NAME}_${SHORT_SHA}

  # Pull previous image
  - name: gcr.io/cloud-builders/docker
    args:
      - '-c'
      - 'docker pull gcr.io/$PROJECT_ID/$_IMAGE_NAME:latest || exit 0'
    entrypoint: bash

  # Build image
  - name: gcr.io/cloud-builders/docker
    args:
      - '-c'
      - >
        cp yarn.lock packages/$_TARGET_PACKAGE

        cd packages/$_TARGET_PACKAGE

        echo "copy $_ENV_FILE to .env.local"

        cp $_ENV_FILE .env.local

        docker build -t \

        gcr.io/$PROJECT_ID/$_IMAGE_NAME:${BRANCH_NAME}_${SHORT_SHA} \

        -t gcr.io/$PROJECT_ID/$_IMAGE_NAME:latest \

        --cache-from gcr.io/$PROJECT_ID/$_IMAGE_NAME:latest .
    entrypoint: bash

  # Push container image to registry
  - name: gcr.io/cloud-builders/docker
    args:
      - push
      - 'gcr.io/$PROJECT_ID/$_IMAGE_NAME:${BRANCH_NAME}_${SHORT_SHA}'

  # Deploy container image to Cloud Runs
  - name: gcr.io/cloud-builders/gcloud
    id: Deploy Image
    entrypoint: 'bash'
    args:
      - '-c'
      - |

        # read cloud run service names from substitution variable
        IFS=',' read -r -a entrypoints <<< "$_NPM_SCRIPT"

        for script in "${entrypoints[@]}"
        do

        # check if job exists
        if gcloud run jobs describe "$script" --region asia-east1 &> /dev/null; then
          # update cloud run job
          gcloud run jobs update "$_CLOUD_RUN_JOB_PREFIX$script" --image gcr.io/$PROJECT_ID/$_IMAGE_NAME:${BRANCH_NAME}_${SHORT_SHA} --region asia-east1 --command "yarn" --args "$script"
        else
          # create cloud run job
          gcloud run jobs create "$_CLOUD_RUN_JOB_PREFIX$script" --image gcr.io/$PROJECT_ID/$_IMAGE_NAME:${BRANCH_NAME}_${SHORT_SHA} --region asia-east1 --command "yarn" --args "$script"
        fi

        done

  # Push container image to registry to update the latest one
  - name: gcr.io/cloud-builders/docker
    args:
      - push
      - 'gcr.io/$PROJECT_ID/$_IMAGE_NAME:latest'

timeout: 2400s

options:
  logging: CLOUD_LOGGING_ONLY

substitutions:
  _TARGET_PACKAGE: '' # default value
  _IMAGE_NAME: '' # default value
  _CLOUD_RUN_JOB_PREFIX: 'cronjob-' # default value
  _NPM_SCRIPT: 'start' # default value
  _ENV_FILE: '' # default value
  _DEPLOYMENT_TYPE: 'service' # default value
