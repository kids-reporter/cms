// This file is automatically generated by Keystone, do not modify it manually.
// Modify your Keystone config when you want to change this.

datasource postgresql {
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
  provider          = "postgresql"
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id                    Int       @id @default(autoincrement())
  name                  String    @default("")
  email                 String    @unique @default("")
  password              String
  role                  String
  createdAt             DateTime? @default(now())
  updatedAt             DateTime? @updatedAt
  twoFactorAuthBypass   Boolean   @default(false)
  twoFactorAuthSecret   String?
  twoFactorAuthTemp     String?
  from_Post_createdBy   Post[]    @relation("Post_createdBy")
  from_Post_updatedBy   Post[]    @relation("Post_updatedBy")
  from_Post_onlineUsers Post[]    @relation("Post_onlineUsers")
}

model Post {
  id                                         Int                  @id @default(autoincrement())
  slug                                       String               @unique @default("")
  title                                      String               @default("")
  subtitle                                   String               @default("")
  status                                     String?              @default("draft")
  publishedDate                              DateTime?
  mainProject                                Project?             @relation("Post_mainProject", fields: [mainProjectId], references: [id])
  mainProjectId                              Int?                 @map("mainProject")
  subSubcategories                           SubSubcategory[]     @relation("Post_subSubcategories")
  subSubcategoriesOrderJson                  Json?                @default("[]")
  authors                                    Author[]             @relation("Author_posts")
  authorsJSON                                Json?                @default("[]")
  heroImage                                  Photo?               @relation("Post_heroImage", fields: [heroImageId], references: [id])
  heroImageId                                Int?                 @map("heroImage")
  heroCaption                                String               @default("")
  newsReadingGroup                           NewsReadingGroup?    @relation("Post_newsReadingGroup", fields: [newsReadingGroupId], references: [id])
  newsReadingGroupId                         Int?                 @map("newsReadingGroup")
  brief                                      Json?
  content                                    Json?
  projects                                   Project[]            @relation("Post_projects")
  tags                                       Tag[]                @relation("Post_tags")
  tagsOrderJson                              Json?                @default("[]")
  relatedPosts                               Post[]               @relation("Post_relatedPosts")
  relatedPostsOrderJson                      Json?                @default("[]")
  ogTitle                                    String               @default("")
  ogDescription                              String               @default("")
  ogImage                                    Photo?               @relation("Post_ogImage", fields: [ogImageId], references: [id])
  ogImageId                                  Int?                 @map("ogImage")
  createdAt                                  DateTime?            @default(now())
  updatedAt                                  DateTime?            @updatedAt
  createdBy                                  User?                @relation("Post_createdBy", fields: [createdById], references: [id])
  createdById                                Int?                 @map("createdBy")
  updatedBy                                  User?                @relation("Post_updatedBy", fields: [updatedById], references: [id])
  updatedById                                Int?                 @map("updatedBy")
  onlineUsers                                User[]               @relation("Post_onlineUsers")
  from_Post_relatedPosts                     Post[]               @relation("Post_relatedPosts")
  from_EditorPicksSetting_editorPicksOfPosts EditorPicksSetting[] @relation("EditorPicksSetting_editorPicksOfPosts")

  @@index([title])
  @@index([status])
  @@index([publishedDate])
  @@index([mainProjectId])
  @@index([heroImageId])
  @@index([newsReadingGroupId])
  @@index([ogImageId])
  @@index([createdById])
  @@index([updatedById])
}

model Photo {
  id                             Int               @id @default(autoincrement())
  name                           String            @default("")
  imageFile_filesize             Int?
  imageFile_extension            String?
  imageFile_width                Int?
  imageFile_height               Int?
  imageFile_id                   String?
  authors                        Author[]          @relation("Photo_authors")
  createdAt                      DateTime?         @default(now())
  updatedAt                      DateTime?         @updatedAt
  from_Post_heroImage            Post[]            @relation("Post_heroImage")
  from_Post_ogImage              Post[]            @relation("Post_ogImage")
  from_Author_avatar             Author[]          @relation("Author_avatar")
  from_Author_image              Author[]          @relation("Author_image")
  from_Project_heroImage         Project[]         @relation("Project_heroImage")
  from_Project_mobileHeroImage   Project[]         @relation("Project_mobileHeroImage")
  from_Project_ogImage           Project[]         @relation("Project_ogImage")
  from_ProjectCategory_heroImage ProjectCategory[] @relation("ProjectCategory_heroImage")
  from_ProjectCategory_ogImage   ProjectCategory[] @relation("ProjectCategory_ogImage")
  from_Category_heroImage        Category[]        @relation("Category_heroImage")
  from_Category_ogImage          Category[]        @relation("Category_ogImage")
  from_Tag_ogImage               Tag[]             @relation("Tag_ogImage")
}

model Author {
  id                 Int       @id @default(autoincrement())
  slug               String    @unique @default("")
  name               String    @default("")
  email              String    @default("")
  bio                String    @default("")
  avatar             Photo?    @relation("Author_avatar", fields: [avatarId], references: [id])
  avatarId           Int?      @map("avatar")
  image              Photo?    @relation("Author_image", fields: [imageId], references: [id])
  imageId            Int?      @map("image")
  posts              Post[]    @relation("Author_posts")
  createdAt          DateTime? @default(now())
  updatedAt          DateTime? @updatedAt
  from_Photo_authors Photo[]   @relation("Photo_authors")
  from_SVG_authors   SVG[]     @relation("SVG_authors")

  @@index([name])
  @@index([avatarId])
  @@index([imageId])
}

model Project {
  id                                            Int                  @id @default(autoincrement())
  slug                                          String               @unique @default("")
  title                                         String               @default("")
  subtitle                                      String               @default("")
  titlePosition                                 String?              @default("center")
  status                                        String?              @default("draft")
  publishedDate                                 DateTime?
  heroImage                                     Photo?               @relation("Project_heroImage", fields: [heroImageId], references: [id])
  heroImageId                                   Int?                 @map("heroImage")
  mobileHeroImage                               Photo?               @relation("Project_mobileHeroImage", fields: [mobileHeroImageId], references: [id])
  mobileHeroImageId                             Int?                 @map("mobileHeroImage")
  content                                       Json?
  credits                                       Json?
  relatedPosts                                  Post[]               @relation("Post_projects")
  relatedPostsOrderJson                         Json?                @default("[]")
  projectCategories                             ProjectCategory[]    @relation("Project_projectCategories")
  tags                                          Tag[]                @relation("Project_tags")
  ogTitle                                       String               @default("")
  ogDescription                                 String               @default("")
  ogImage                                       Photo?               @relation("Project_ogImage", fields: [ogImageId], references: [id])
  ogImageId                                     Int?                 @map("ogImage")
  createdAt                                     DateTime?            @default(now())
  updatedAt                                     DateTime?            @updatedAt
  from_Post_mainProject                         Post[]               @relation("Post_mainProject")
  from_EditorPicksSetting_editorPicksOfProjects EditorPicksSetting[] @relation("EditorPicksSetting_editorPicksOfProjects")

  @@index([title])
  @@index([status])
  @@index([publishedDate])
  @@index([heroImageId])
  @@index([mobileHeroImageId])
  @@index([ogImageId])
}

model ProjectCategory {
  id            Int       @id @default(autoincrement())
  slug          String    @unique @default("")
  name          String    @unique @default("")
  projects      Project[] @relation("Project_projectCategories")
  heroImage     Photo?    @relation("ProjectCategory_heroImage", fields: [heroImageId], references: [id])
  heroImageId   Int?      @map("heroImage")
  ogTitle       String    @default("")
  ogDescription String    @default("")
  ogImage       Photo?    @relation("ProjectCategory_ogImage", fields: [ogImageId], references: [id])
  ogImageId     Int?      @map("ogImage")
  createdAt     DateTime? @default(now())
  updatedAt     DateTime? @updatedAt

  @@index([heroImageId])
  @@index([ogImageId])
}

model Category {
  id            Int           @id @default(autoincrement())
  slug          String        @unique @default("")
  name          String        @unique @default("")
  subcategories Subcategory[] @relation("Subcategory_category")
  themeColor    String?       @default("blue")
  heroImage     Photo?        @relation("Category_heroImage", fields: [heroImageId], references: [id])
  heroImageId   Int?          @map("heroImage")
  ogTitle       String        @default("")
  ogDescription String        @default("")
  ogImage       Photo?        @relation("Category_ogImage", fields: [ogImageId], references: [id])
  ogImageId     Int?          @map("ogImage")
  createdAt     DateTime?     @default(now())
  updatedAt     DateTime?     @updatedAt

  @@index([heroImageId])
  @@index([ogImageId])
}

model Subcategory {
  id               Int              @id @default(autoincrement())
  slug             String           @unique @default("")
  name             String           @default("")
  nameForCMS       String           @unique @default("")
  category         Category?        @relation("Subcategory_category", fields: [categoryId], references: [id])
  categoryId       Int?             @map("category")
  subSubcategories SubSubcategory[] @relation("SubSubcategory_subcategory")
  createdAt        DateTime?        @default(now())
  updatedAt        DateTime?        @updatedAt

  @@index([categoryId])
}

model SubSubcategory {
  id            Int          @id @default(autoincrement())
  slug          String       @unique @default("")
  name          String       @default("")
  nameForCMS    String       @unique @default("")
  subcategory   Subcategory? @relation("SubSubcategory_subcategory", fields: [subcategoryId], references: [id])
  subcategoryId Int?         @map("subcategory")
  relatedPosts  Post[]       @relation("Post_subSubcategories")
  createdAt     DateTime?    @default(now())
  updatedAt     DateTime?    @updatedAt

  @@index([subcategoryId])
}

model Tag {
  id                                        Int                  @id @default(autoincrement())
  slug                                      String               @unique @default("")
  name                                      String               @unique @default("")
  projects                                  Project[]            @relation("Project_tags")
  ogTitle                                   String               @default("")
  ogDescription                             String               @default("")
  ogImage                                   Photo?               @relation("Tag_ogImage", fields: [ogImageId], references: [id])
  ogImageId                                 Int?                 @map("ogImage")
  posts                                     Post[]               @relation("Post_tags")
  createdAt                                 DateTime?            @default(now())
  updatedAt                                 DateTime?            @updatedAt
  from_EditorPicksSetting_editorPicksOfTags EditorPicksSetting[] @relation("EditorPicksSetting_editorPicksOfTags")

  @@index([ogImageId])
}

model NewsReadingGroup {
  id                         Int                    @id @default(autoincrement())
  name                       String                 @default("")
  items                      NewsReadingGroupItem[] @relation("NewsReadingGroup_items")
  createdAt                  DateTime?              @default(now())
  updatedAt                  DateTime?              @updatedAt
  from_Post_newsReadingGroup Post[]                 @relation("Post_newsReadingGroup")

  @@index([name])
}

model NewsReadingGroupItem {
  id                          Int                @id @default(autoincrement())
  name                        String             @default("")
  embedCode                   String             @default("")
  order                       Int?
  createdAt                   DateTime?          @default(now())
  updatedAt                   DateTime?          @updatedAt
  from_NewsReadingGroup_items NewsReadingGroup[] @relation("NewsReadingGroup_items")
}

model EditorPicksSetting {
  id                          Int       @id @default(autoincrement())
  name                        String    @unique @default("")
  nameForCMS                  String    @default("")
  editorPicksOfPosts          Post[]    @relation("EditorPicksSetting_editorPicksOfPosts")
  editorPicksOfPostsOrderJson Json?     @default("[]")
  editorPicksOfProjects       Project[] @relation("EditorPicksSetting_editorPicksOfProjects")
  editorPicksOfTags           Tag[]     @relation("EditorPicksSetting_editorPicksOfTags")
  createdAt                   DateTime? @default(now())
  updatedAt                   DateTime? @updatedAt
}

model PDF {
  id                     Int       @id @default(autoincrement())
  name                   String    @default("")
  file_filesize          Int?
  file_filename          String?
  googleDrivePreviewLink String    @default("")
  description            String    @default("")
  createdAt              DateTime? @default(now())
  updatedAt              DateTime? @updatedAt

  @@index([name])
}

model SVG {
  id               Int       @id @default(autoincrement())
  name             String    @default("")
  svgFile_filesize Int?
  svgFile_filename String?
  authors          Author[]  @relation("SVG_authors")
  createdAt        DateTime? @default(now())
  updatedAt        DateTime? @updatedAt
}
