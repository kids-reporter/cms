# This file is automatically generated by Keystone, do not modify it manually.
# Modify your Keystone config when you want to change this.

type User {
  id: ID!
  name: String
  email: String
  password: PasswordState
  role: String
  createdAt: DateTime
  updatedAt: DateTime
  twoFactorAuthBypass: Boolean
  twoFactorAuthSecret: String
  twoFactorAuthTemp: String
  twoFactorAuth: JSON
}

type PasswordState {
  isSet: Boolean!
}

scalar DateTime @specifiedBy(url: "https://datatracker.ietf.org/doc/html/rfc3339#section-5.6")

input UserWhereUniqueInput {
  id: ID
  email: String
}

input UserWhereInput {
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
  id: IDFilter
  name: StringFilter
  email: StringFilter
  role: StringFilter
  createdAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
  twoFactorAuthBypass: BooleanFilter
  twoFactorAuthSecret: StringNullableFilter
  twoFactorAuthTemp: StringNullableFilter
}

input IDFilter {
  equals: ID
  in: [ID!]
  notIn: [ID!]
  lt: ID
  lte: ID
  gt: ID
  gte: ID
  not: IDFilter
}

input StringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  mode: QueryMode
  not: NestedStringFilter
}

enum QueryMode {
  default
  insensitive
}

input NestedStringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringFilter
}

input DateTimeNullableFilter {
  equals: DateTime
  in: [DateTime!]
  notIn: [DateTime!]
  lt: DateTime
  lte: DateTime
  gt: DateTime
  gte: DateTime
  not: DateTimeNullableFilter
}

input BooleanFilter {
  equals: Boolean
  not: BooleanFilter
}

input StringNullableFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  mode: QueryMode
  not: NestedStringNullableFilter
}

input NestedStringNullableFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringNullableFilter
}

input UserOrderByInput {
  id: OrderDirection
  name: OrderDirection
  email: OrderDirection
  role: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
  twoFactorAuthBypass: OrderDirection
  twoFactorAuthSecret: OrderDirection
  twoFactorAuthTemp: OrderDirection
}

enum OrderDirection {
  asc
  desc
}

input UserUpdateInput {
  name: String
  email: String
  password: String
  role: String
  createdAt: DateTime
  updatedAt: DateTime
  twoFactorAuthBypass: Boolean
  twoFactorAuthSecret: String
  twoFactorAuthTemp: String
}

input UserUpdateArgs {
  where: UserWhereUniqueInput!
  data: UserUpdateInput!
}

input UserCreateInput {
  name: String
  email: String
  password: String
  role: String
  createdAt: DateTime
  updatedAt: DateTime
  twoFactorAuthBypass: Boolean
  twoFactorAuthSecret: String
  twoFactorAuthTemp: String
}

type Post {
  id: ID!
  slug: String
  title: String
  subtitle: String
  status: String
  publishedDate: DateTime
  mainProject: Project
  subSubcategories(where: SubSubcategoryWhereInput! = {}, orderBy: [SubSubcategoryOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: SubSubcategoryWhereUniqueInput): [SubSubcategory!]
  subSubcategoriesCount(where: SubSubcategoryWhereInput! = {}): Int
  subSubcategoriesOrderJson: JSON
  subSubcategoriesOrdered(take: Int! = 12, skip: Int! = 0): [SubSubcategory!]
  authors(where: AuthorWhereInput! = {}, orderBy: [AuthorOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: AuthorWhereUniqueInput): [Author!]
  authorsCount(where: AuthorWhereInput! = {}): Int
  authorsJSON: JSON
  heroImage: Photo
  heroCaption: String
  newsReadingGroup: NewsReadingGroup
  brief: JSON
  content: JSON
  projects(where: ProjectWhereInput! = {}, orderBy: [ProjectOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: ProjectWhereUniqueInput): [Project!]
  projectsCount(where: ProjectWhereInput! = {}): Int
  tags(where: TagWhereInput! = {}, orderBy: [TagOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: TagWhereUniqueInput): [Tag!]
  tagsCount(where: TagWhereInput! = {}): Int
  tagsOrderJson: JSON
  tagsOrdered(take: Int! = 12, skip: Int! = 0): [Tag!]
  relatedPosts(where: PostWhereInput! = {}, orderBy: [PostOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: PostWhereUniqueInput): [Post!]
  relatedPostsCount(where: PostWhereInput! = {}): Int
  relatedPostsOrderJson: JSON
  relatedPostsOrdered(take: Int! = 12, skip: Int! = 0): [Post!]
  ogTitle: String
  ogDescription: String
  ogImage: Photo
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: User
  updatedBy: User
  createdLog: JSON
  updatedLog: JSON
  preview: JSON
  listPreview: String
  onlineUsers(where: UserWhereInput! = {}, orderBy: [UserOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: UserWhereUniqueInput): [User!]
  onlineUsersCount(where: UserWhereInput! = {}): Int
}

input PostWhereUniqueInput {
  id: ID
  slug: String
}

input PostWhereInput {
  AND: [PostWhereInput!]
  OR: [PostWhereInput!]
  NOT: [PostWhereInput!]
  id: IDFilter
  slug: StringFilter
  title: StringFilter
  subtitle: StringFilter
  status: StringNullableFilter
  publishedDate: DateTimeNullableFilter
  mainProject: ProjectWhereInput
  subSubcategories: SubSubcategoryManyRelationFilter
  authors: AuthorManyRelationFilter
  heroImage: PhotoWhereInput
  heroCaption: StringFilter
  newsReadingGroup: NewsReadingGroupWhereInput
  projects: ProjectManyRelationFilter
  tags: TagManyRelationFilter
  relatedPosts: PostManyRelationFilter
  ogTitle: StringFilter
  ogDescription: StringFilter
  ogImage: PhotoWhereInput
  createdAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
  createdBy: UserWhereInput
  updatedBy: UserWhereInput
  onlineUsers: UserManyRelationFilter
}

input SubSubcategoryManyRelationFilter {
  every: SubSubcategoryWhereInput
  some: SubSubcategoryWhereInput
  none: SubSubcategoryWhereInput
}

input AuthorManyRelationFilter {
  every: AuthorWhereInput
  some: AuthorWhereInput
  none: AuthorWhereInput
}

input ProjectManyRelationFilter {
  every: ProjectWhereInput
  some: ProjectWhereInput
  none: ProjectWhereInput
}

input TagManyRelationFilter {
  every: TagWhereInput
  some: TagWhereInput
  none: TagWhereInput
}

input PostManyRelationFilter {
  every: PostWhereInput
  some: PostWhereInput
  none: PostWhereInput
}

input UserManyRelationFilter {
  every: UserWhereInput
  some: UserWhereInput
  none: UserWhereInput
}

input PostOrderByInput {
  id: OrderDirection
  slug: OrderDirection
  title: OrderDirection
  subtitle: OrderDirection
  status: OrderDirection
  publishedDate: OrderDirection
  heroCaption: OrderDirection
  ogTitle: OrderDirection
  ogDescription: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
}

input PostUpdateInput {
  slug: String
  title: String
  subtitle: String
  status: String
  publishedDate: DateTime
  mainProject: ProjectRelateToOneForUpdateInput
  subSubcategories: SubSubcategoryRelateToManyForUpdateInput
  subSubcategoriesOrderJson: JSON
  authors: AuthorRelateToManyForUpdateInput
  authorsJSON: JSON
  heroImage: PhotoRelateToOneForUpdateInput
  heroCaption: String
  newsReadingGroup: NewsReadingGroupRelateToOneForUpdateInput
  brief: JSON
  content: JSON
  projects: ProjectRelateToManyForUpdateInput
  tags: TagRelateToManyForUpdateInput
  tagsOrderJson: JSON
  relatedPosts: PostRelateToManyForUpdateInput
  relatedPostsOrderJson: JSON
  ogTitle: String
  ogDescription: String
  ogImage: PhotoRelateToOneForUpdateInput
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: UserRelateToOneForUpdateInput
  updatedBy: UserRelateToOneForUpdateInput
  onlineUsers: UserRelateToManyForUpdateInput
}

input ProjectRelateToOneForUpdateInput {
  create: ProjectCreateInput
  connect: ProjectWhereUniqueInput
  disconnect: Boolean
}

input SubSubcategoryRelateToManyForUpdateInput {
  disconnect: [SubSubcategoryWhereUniqueInput!]
  set: [SubSubcategoryWhereUniqueInput!]
  create: [SubSubcategoryCreateInput!]
  connect: [SubSubcategoryWhereUniqueInput!]
}

input AuthorRelateToManyForUpdateInput {
  disconnect: [AuthorWhereUniqueInput!]
  set: [AuthorWhereUniqueInput!]
  create: [AuthorCreateInput!]
  connect: [AuthorWhereUniqueInput!]
}

input PhotoRelateToOneForUpdateInput {
  create: PhotoCreateInput
  connect: PhotoWhereUniqueInput
  disconnect: Boolean
}

input NewsReadingGroupRelateToOneForUpdateInput {
  create: NewsReadingGroupCreateInput
  connect: NewsReadingGroupWhereUniqueInput
  disconnect: Boolean
}

input ProjectRelateToManyForUpdateInput {
  disconnect: [ProjectWhereUniqueInput!]
  set: [ProjectWhereUniqueInput!]
  create: [ProjectCreateInput!]
  connect: [ProjectWhereUniqueInput!]
}

input TagRelateToManyForUpdateInput {
  disconnect: [TagWhereUniqueInput!]
  set: [TagWhereUniqueInput!]
  create: [TagCreateInput!]
  connect: [TagWhereUniqueInput!]
}

input PostRelateToManyForUpdateInput {
  disconnect: [PostWhereUniqueInput!]
  set: [PostWhereUniqueInput!]
  create: [PostCreateInput!]
  connect: [PostWhereUniqueInput!]
}

input UserRelateToOneForUpdateInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
  disconnect: Boolean
}

input UserRelateToManyForUpdateInput {
  disconnect: [UserWhereUniqueInput!]
  set: [UserWhereUniqueInput!]
  create: [UserCreateInput!]
  connect: [UserWhereUniqueInput!]
}

input PostUpdateArgs {
  where: PostWhereUniqueInput!
  data: PostUpdateInput!
}

input PostCreateInput {
  slug: String
  title: String
  subtitle: String
  status: String
  publishedDate: DateTime
  mainProject: ProjectRelateToOneForCreateInput
  subSubcategories: SubSubcategoryRelateToManyForCreateInput
  subSubcategoriesOrderJson: JSON
  authors: AuthorRelateToManyForCreateInput
  authorsJSON: JSON
  heroImage: PhotoRelateToOneForCreateInput
  heroCaption: String
  newsReadingGroup: NewsReadingGroupRelateToOneForCreateInput
  brief: JSON
  content: JSON
  projects: ProjectRelateToManyForCreateInput
  tags: TagRelateToManyForCreateInput
  tagsOrderJson: JSON
  relatedPosts: PostRelateToManyForCreateInput
  relatedPostsOrderJson: JSON
  ogTitle: String
  ogDescription: String
  ogImage: PhotoRelateToOneForCreateInput
  createdAt: DateTime
  updatedAt: DateTime
  createdBy: UserRelateToOneForCreateInput
  updatedBy: UserRelateToOneForCreateInput
  onlineUsers: UserRelateToManyForCreateInput
}

input ProjectRelateToOneForCreateInput {
  create: ProjectCreateInput
  connect: ProjectWhereUniqueInput
}

input SubSubcategoryRelateToManyForCreateInput {
  create: [SubSubcategoryCreateInput!]
  connect: [SubSubcategoryWhereUniqueInput!]
}

input AuthorRelateToManyForCreateInput {
  create: [AuthorCreateInput!]
  connect: [AuthorWhereUniqueInput!]
}

input PhotoRelateToOneForCreateInput {
  create: PhotoCreateInput
  connect: PhotoWhereUniqueInput
}

input NewsReadingGroupRelateToOneForCreateInput {
  create: NewsReadingGroupCreateInput
  connect: NewsReadingGroupWhereUniqueInput
}

input ProjectRelateToManyForCreateInput {
  create: [ProjectCreateInput!]
  connect: [ProjectWhereUniqueInput!]
}

input TagRelateToManyForCreateInput {
  create: [TagCreateInput!]
  connect: [TagWhereUniqueInput!]
}

input PostRelateToManyForCreateInput {
  create: [PostCreateInput!]
  connect: [PostWhereUniqueInput!]
}

input UserRelateToOneForCreateInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
}

input UserRelateToManyForCreateInput {
  create: [UserCreateInput!]
  connect: [UserWhereUniqueInput!]
}

type Photo {
  id: ID!
  name: String
  imageFile: ImageFieldOutput
  authors(where: AuthorWhereInput! = {}, orderBy: [AuthorOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: AuthorWhereUniqueInput): [Author!]
  authorsCount(where: AuthorWhereInput! = {}): Int
  createdAt: DateTime
  updatedAt: DateTime
  resized: ResizedImages
}

type ImageFieldOutput {
  id: ID!
  filesize: Int!
  width: Int!
  height: Int!
  extension: ImageExtension!
  url: String!
}

enum ImageExtension {
  jpg
  png
  webp
  gif
}

type ResizedImages {
  original: String
  tiny: String
  small: String
  medium: String
  large: String
}

input PhotoWhereUniqueInput {
  id: ID
}

input PhotoWhereInput {
  AND: [PhotoWhereInput!]
  OR: [PhotoWhereInput!]
  NOT: [PhotoWhereInput!]
  id: IDFilter
  name: StringFilter
  authors: AuthorManyRelationFilter
  createdAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
}

input PhotoOrderByInput {
  id: OrderDirection
  name: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
}

input PhotoUpdateInput {
  name: String
  imageFile: ImageFieldInput
  authors: AuthorRelateToManyForUpdateInput
  createdAt: DateTime
  updatedAt: DateTime
}

input ImageFieldInput {
  upload: Upload!
}

"""The `Upload` scalar type represents a file upload."""
scalar Upload

input PhotoUpdateArgs {
  where: PhotoWhereUniqueInput!
  data: PhotoUpdateInput!
}

input PhotoCreateInput {
  name: String
  imageFile: ImageFieldInput
  authors: AuthorRelateToManyForCreateInput
  createdAt: DateTime
  updatedAt: DateTime
}

type Author {
  id: ID!
  slug: String
  name: String
  email: String
  bio: String
  avatar: Photo
  image: Photo
  posts(where: PostWhereInput! = {}, orderBy: [PostOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: PostWhereUniqueInput): [Post!]
  postsCount(where: PostWhereInput! = {}): Int
  createdAt: DateTime
  updatedAt: DateTime
}

input AuthorWhereUniqueInput {
  id: ID
  slug: String
}

input AuthorWhereInput {
  AND: [AuthorWhereInput!]
  OR: [AuthorWhereInput!]
  NOT: [AuthorWhereInput!]
  id: IDFilter
  slug: StringFilter
  name: StringFilter
  email: StringFilter
  bio: StringFilter
  avatar: PhotoWhereInput
  image: PhotoWhereInput
  posts: PostManyRelationFilter
  createdAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
}

input AuthorOrderByInput {
  id: OrderDirection
  slug: OrderDirection
  name: OrderDirection
  email: OrderDirection
  bio: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
}

input AuthorUpdateInput {
  slug: String
  name: String
  email: String
  bio: String
  avatar: PhotoRelateToOneForUpdateInput
  image: PhotoRelateToOneForUpdateInput
  posts: PostRelateToManyForUpdateInput
  createdAt: DateTime
  updatedAt: DateTime
}

input AuthorUpdateArgs {
  where: AuthorWhereUniqueInput!
  data: AuthorUpdateInput!
}

input AuthorCreateInput {
  slug: String
  name: String
  email: String
  bio: String
  avatar: PhotoRelateToOneForCreateInput
  image: PhotoRelateToOneForCreateInput
  posts: PostRelateToManyForCreateInput
  createdAt: DateTime
  updatedAt: DateTime
}

type Project {
  id: ID!
  slug: String
  title: String
  subtitle: String
  titlePosition: String
  status: String
  publishedDate: DateTime
  heroImage: Photo
  mobileHeroImage: Photo
  content: JSON
  credits: JSON
  relatedPosts(where: PostWhereInput! = {}, orderBy: [PostOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: PostWhereUniqueInput): [Post!]
  relatedPostsCount(where: PostWhereInput! = {}): Int
  relatedPostsOrderJson: JSON
  relatedPostsOrdered(take: Int! = 12, skip: Int! = 0): [Post!]
  projectCategories(where: ProjectCategoryWhereInput! = {}, orderBy: [ProjectCategoryOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: ProjectCategoryWhereUniqueInput): [ProjectCategory!]
  projectCategoriesCount(where: ProjectCategoryWhereInput! = {}): Int
  tags(where: TagWhereInput! = {}, orderBy: [TagOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: TagWhereUniqueInput): [Tag!]
  tagsCount(where: TagWhereInput! = {}): Int
  ogTitle: String
  ogDescription: String
  ogImage: Photo
  createdAt: DateTime
  updatedAt: DateTime
  preview: JSON
}

input ProjectWhereUniqueInput {
  id: ID
  slug: String
}

input ProjectWhereInput {
  AND: [ProjectWhereInput!]
  OR: [ProjectWhereInput!]
  NOT: [ProjectWhereInput!]
  id: IDFilter
  slug: StringFilter
  title: StringFilter
  subtitle: StringFilter
  titlePosition: StringNullableFilter
  status: StringNullableFilter
  publishedDate: DateTimeNullableFilter
  heroImage: PhotoWhereInput
  mobileHeroImage: PhotoWhereInput
  relatedPosts: PostManyRelationFilter
  projectCategories: ProjectCategoryManyRelationFilter
  tags: TagManyRelationFilter
  ogTitle: StringFilter
  ogDescription: StringFilter
  ogImage: PhotoWhereInput
  createdAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
}

input ProjectCategoryManyRelationFilter {
  every: ProjectCategoryWhereInput
  some: ProjectCategoryWhereInput
  none: ProjectCategoryWhereInput
}

input ProjectOrderByInput {
  id: OrderDirection
  slug: OrderDirection
  title: OrderDirection
  subtitle: OrderDirection
  titlePosition: OrderDirection
  status: OrderDirection
  publishedDate: OrderDirection
  ogTitle: OrderDirection
  ogDescription: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
}

input ProjectUpdateInput {
  slug: String
  title: String
  subtitle: String
  titlePosition: String
  status: String
  publishedDate: DateTime
  heroImage: PhotoRelateToOneForUpdateInput
  mobileHeroImage: PhotoRelateToOneForUpdateInput
  content: JSON
  credits: JSON
  relatedPosts: PostRelateToManyForUpdateInput
  relatedPostsOrderJson: JSON
  projectCategories: ProjectCategoryRelateToManyForUpdateInput
  tags: TagRelateToManyForUpdateInput
  ogTitle: String
  ogDescription: String
  ogImage: PhotoRelateToOneForUpdateInput
  createdAt: DateTime
  updatedAt: DateTime
}

input ProjectCategoryRelateToManyForUpdateInput {
  disconnect: [ProjectCategoryWhereUniqueInput!]
  set: [ProjectCategoryWhereUniqueInput!]
  create: [ProjectCategoryCreateInput!]
  connect: [ProjectCategoryWhereUniqueInput!]
}

input ProjectUpdateArgs {
  where: ProjectWhereUniqueInput!
  data: ProjectUpdateInput!
}

input ProjectCreateInput {
  slug: String
  title: String
  subtitle: String
  titlePosition: String
  status: String
  publishedDate: DateTime
  heroImage: PhotoRelateToOneForCreateInput
  mobileHeroImage: PhotoRelateToOneForCreateInput
  content: JSON
  credits: JSON
  relatedPosts: PostRelateToManyForCreateInput
  relatedPostsOrderJson: JSON
  projectCategories: ProjectCategoryRelateToManyForCreateInput
  tags: TagRelateToManyForCreateInput
  ogTitle: String
  ogDescription: String
  ogImage: PhotoRelateToOneForCreateInput
  createdAt: DateTime
  updatedAt: DateTime
}

input ProjectCategoryRelateToManyForCreateInput {
  create: [ProjectCategoryCreateInput!]
  connect: [ProjectCategoryWhereUniqueInput!]
}

type ProjectCategory {
  id: ID!
  slug: String
  name: String
  projects(where: ProjectWhereInput! = {}, orderBy: [ProjectOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: ProjectWhereUniqueInput): [Project!]
  projectsCount(where: ProjectWhereInput! = {}): Int
  heroImage: Photo
  ogTitle: String
  ogDescription: String
  ogImage: Photo
  createdAt: DateTime
  updatedAt: DateTime
}

input ProjectCategoryWhereUniqueInput {
  id: ID
  slug: String
  name: String
}

input ProjectCategoryWhereInput {
  AND: [ProjectCategoryWhereInput!]
  OR: [ProjectCategoryWhereInput!]
  NOT: [ProjectCategoryWhereInput!]
  id: IDFilter
  slug: StringFilter
  name: StringFilter
  projects: ProjectManyRelationFilter
  heroImage: PhotoWhereInput
  ogTitle: StringFilter
  ogDescription: StringFilter
  ogImage: PhotoWhereInput
  createdAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
}

input ProjectCategoryOrderByInput {
  id: OrderDirection
  slug: OrderDirection
  name: OrderDirection
  ogTitle: OrderDirection
  ogDescription: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
}

input ProjectCategoryUpdateInput {
  slug: String
  name: String
  projects: ProjectRelateToManyForUpdateInput
  heroImage: PhotoRelateToOneForUpdateInput
  ogTitle: String
  ogDescription: String
  ogImage: PhotoRelateToOneForUpdateInput
  createdAt: DateTime
  updatedAt: DateTime
}

input ProjectCategoryUpdateArgs {
  where: ProjectCategoryWhereUniqueInput!
  data: ProjectCategoryUpdateInput!
}

input ProjectCategoryCreateInput {
  slug: String
  name: String
  projects: ProjectRelateToManyForCreateInput
  heroImage: PhotoRelateToOneForCreateInput
  ogTitle: String
  ogDescription: String
  ogImage: PhotoRelateToOneForCreateInput
  createdAt: DateTime
  updatedAt: DateTime
}

type Category {
  id: ID!
  slug: String
  name: String
  subcategories(where: SubcategoryWhereInput! = {}, orderBy: [SubcategoryOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: SubcategoryWhereUniqueInput): [Subcategory!]
  subcategoriesCount(where: SubcategoryWhereInput! = {}): Int
  themeColor: String
  heroImage: Photo
  ogTitle: String
  ogDescription: String
  ogImage: Photo
  relatedPosts(take: Int! = 12, skip: Int! = 0): [Post]
  relatedPostsCount: Int
  createdAt: DateTime
  updatedAt: DateTime
}

input CategoryWhereUniqueInput {
  id: ID
  slug: String
  name: String
}

input CategoryWhereInput {
  AND: [CategoryWhereInput!]
  OR: [CategoryWhereInput!]
  NOT: [CategoryWhereInput!]
  id: IDFilter
  slug: StringFilter
  name: StringFilter
  subcategories: SubcategoryManyRelationFilter
  themeColor: StringNullableFilter
  heroImage: PhotoWhereInput
  ogTitle: StringFilter
  ogDescription: StringFilter
  ogImage: PhotoWhereInput
  createdAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
}

input SubcategoryManyRelationFilter {
  every: SubcategoryWhereInput
  some: SubcategoryWhereInput
  none: SubcategoryWhereInput
}

input CategoryOrderByInput {
  id: OrderDirection
  slug: OrderDirection
  name: OrderDirection
  themeColor: OrderDirection
  ogTitle: OrderDirection
  ogDescription: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
}

input CategoryUpdateInput {
  slug: String
  name: String
  subcategories: SubcategoryRelateToManyForUpdateInput
  themeColor: String
  heroImage: PhotoRelateToOneForUpdateInput
  ogTitle: String
  ogDescription: String
  ogImage: PhotoRelateToOneForUpdateInput
  createdAt: DateTime
  updatedAt: DateTime
}

input SubcategoryRelateToManyForUpdateInput {
  disconnect: [SubcategoryWhereUniqueInput!]
  set: [SubcategoryWhereUniqueInput!]
  create: [SubcategoryCreateInput!]
  connect: [SubcategoryWhereUniqueInput!]
}

input CategoryUpdateArgs {
  where: CategoryWhereUniqueInput!
  data: CategoryUpdateInput!
}

input CategoryCreateInput {
  slug: String
  name: String
  subcategories: SubcategoryRelateToManyForCreateInput
  themeColor: String
  heroImage: PhotoRelateToOneForCreateInput
  ogTitle: String
  ogDescription: String
  ogImage: PhotoRelateToOneForCreateInput
  createdAt: DateTime
  updatedAt: DateTime
}

input SubcategoryRelateToManyForCreateInput {
  create: [SubcategoryCreateInput!]
  connect: [SubcategoryWhereUniqueInput!]
}

type Subcategory {
  id: ID!
  slug: String
  name: String
  nameForCMS: String
  category: Category
  subSubcategories(where: SubSubcategoryWhereInput! = {}, orderBy: [SubSubcategoryOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: SubSubcategoryWhereUniqueInput): [SubSubcategory!]
  subSubcategoriesCount(where: SubSubcategoryWhereInput! = {}): Int
  relatedPosts(take: Int! = 12, skip: Int! = 0): [Post]
  relatedPostsCount: Int
  createdAt: DateTime
  updatedAt: DateTime
}

input SubcategoryWhereUniqueInput {
  id: ID
  slug: String
  nameForCMS: String
}

input SubcategoryWhereInput {
  AND: [SubcategoryWhereInput!]
  OR: [SubcategoryWhereInput!]
  NOT: [SubcategoryWhereInput!]
  id: IDFilter
  slug: StringFilter
  name: StringFilter
  nameForCMS: StringFilter
  category: CategoryWhereInput
  subSubcategories: SubSubcategoryManyRelationFilter
  createdAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
}

input SubcategoryOrderByInput {
  id: OrderDirection
  slug: OrderDirection
  name: OrderDirection
  nameForCMS: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
}

input SubcategoryUpdateInput {
  slug: String
  name: String
  nameForCMS: String
  category: CategoryRelateToOneForUpdateInput
  subSubcategories: SubSubcategoryRelateToManyForUpdateInput
  createdAt: DateTime
  updatedAt: DateTime
}

input CategoryRelateToOneForUpdateInput {
  create: CategoryCreateInput
  connect: CategoryWhereUniqueInput
  disconnect: Boolean
}

input SubcategoryUpdateArgs {
  where: SubcategoryWhereUniqueInput!
  data: SubcategoryUpdateInput!
}

input SubcategoryCreateInput {
  slug: String
  name: String
  nameForCMS: String
  category: CategoryRelateToOneForCreateInput
  subSubcategories: SubSubcategoryRelateToManyForCreateInput
  createdAt: DateTime
  updatedAt: DateTime
}

input CategoryRelateToOneForCreateInput {
  create: CategoryCreateInput
  connect: CategoryWhereUniqueInput
}

type SubSubcategory {
  id: ID!
  slug: String
  name: String
  nameForCMS: String
  subcategory: Subcategory
  relatedPosts(where: PostWhereInput! = {}, orderBy: [PostOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: PostWhereUniqueInput): [Post!]
  relatedPostsCount(where: PostWhereInput! = {}): Int
  createdAt: DateTime
  updatedAt: DateTime
}

input SubSubcategoryWhereUniqueInput {
  id: ID
  slug: String
  nameForCMS: String
}

input SubSubcategoryWhereInput {
  AND: [SubSubcategoryWhereInput!]
  OR: [SubSubcategoryWhereInput!]
  NOT: [SubSubcategoryWhereInput!]
  id: IDFilter
  slug: StringFilter
  name: StringFilter
  nameForCMS: StringFilter
  subcategory: SubcategoryWhereInput
  relatedPosts: PostManyRelationFilter
  createdAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
}

input SubSubcategoryOrderByInput {
  id: OrderDirection
  slug: OrderDirection
  name: OrderDirection
  nameForCMS: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
}

input SubSubcategoryUpdateInput {
  slug: String
  name: String
  nameForCMS: String
  subcategory: SubcategoryRelateToOneForUpdateInput
  relatedPosts: PostRelateToManyForUpdateInput
  createdAt: DateTime
  updatedAt: DateTime
}

input SubcategoryRelateToOneForUpdateInput {
  create: SubcategoryCreateInput
  connect: SubcategoryWhereUniqueInput
  disconnect: Boolean
}

input SubSubcategoryUpdateArgs {
  where: SubSubcategoryWhereUniqueInput!
  data: SubSubcategoryUpdateInput!
}

input SubSubcategoryCreateInput {
  slug: String
  name: String
  nameForCMS: String
  subcategory: SubcategoryRelateToOneForCreateInput
  relatedPosts: PostRelateToManyForCreateInput
  createdAt: DateTime
  updatedAt: DateTime
}

input SubcategoryRelateToOneForCreateInput {
  create: SubcategoryCreateInput
  connect: SubcategoryWhereUniqueInput
}

type Tag {
  id: ID!
  slug: String
  name: String
  projects(where: ProjectWhereInput! = {}, orderBy: [ProjectOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: ProjectWhereUniqueInput): [Project!]
  projectsCount(where: ProjectWhereInput! = {}): Int
  ogTitle: String
  ogDescription: String
  ogImage: Photo
  posts(where: PostWhereInput! = {}, orderBy: [PostOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: PostWhereUniqueInput): [Post!]
  postsCount(where: PostWhereInput! = {}): Int
  createdAt: DateTime
  updatedAt: DateTime
}

input TagWhereUniqueInput {
  id: ID
  slug: String
  name: String
}

input TagWhereInput {
  AND: [TagWhereInput!]
  OR: [TagWhereInput!]
  NOT: [TagWhereInput!]
  id: IDFilter
  slug: StringFilter
  name: StringFilter
  projects: ProjectManyRelationFilter
  ogTitle: StringFilter
  ogDescription: StringFilter
  ogImage: PhotoWhereInput
  posts: PostManyRelationFilter
  createdAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
}

input TagOrderByInput {
  id: OrderDirection
  slug: OrderDirection
  name: OrderDirection
  ogTitle: OrderDirection
  ogDescription: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
}

input TagUpdateInput {
  slug: String
  name: String
  projects: ProjectRelateToManyForUpdateInput
  ogTitle: String
  ogDescription: String
  ogImage: PhotoRelateToOneForUpdateInput
  posts: PostRelateToManyForUpdateInput
  createdAt: DateTime
  updatedAt: DateTime
}

input TagUpdateArgs {
  where: TagWhereUniqueInput!
  data: TagUpdateInput!
}

input TagCreateInput {
  slug: String
  name: String
  projects: ProjectRelateToManyForCreateInput
  ogTitle: String
  ogDescription: String
  ogImage: PhotoRelateToOneForCreateInput
  posts: PostRelateToManyForCreateInput
  createdAt: DateTime
  updatedAt: DateTime
}

type NewsReadingGroup {
  id: ID!
  name: String
  items(where: NewsReadingGroupItemWhereInput! = {}, orderBy: [NewsReadingGroupItemOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: NewsReadingGroupItemWhereUniqueInput): [NewsReadingGroupItem!]
  itemsCount(where: NewsReadingGroupItemWhereInput! = {}): Int
  createdAt: DateTime
  updatedAt: DateTime
}

input NewsReadingGroupWhereUniqueInput {
  id: ID
}

input NewsReadingGroupWhereInput {
  AND: [NewsReadingGroupWhereInput!]
  OR: [NewsReadingGroupWhereInput!]
  NOT: [NewsReadingGroupWhereInput!]
  id: IDFilter
  name: StringFilter
  items: NewsReadingGroupItemManyRelationFilter
  createdAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
}

input NewsReadingGroupItemManyRelationFilter {
  every: NewsReadingGroupItemWhereInput
  some: NewsReadingGroupItemWhereInput
  none: NewsReadingGroupItemWhereInput
}

input NewsReadingGroupOrderByInput {
  id: OrderDirection
  name: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
}

input NewsReadingGroupUpdateInput {
  name: String
  items: NewsReadingGroupItemRelateToManyForUpdateInput
  createdAt: DateTime
  updatedAt: DateTime
}

input NewsReadingGroupItemRelateToManyForUpdateInput {
  disconnect: [NewsReadingGroupItemWhereUniqueInput!]
  set: [NewsReadingGroupItemWhereUniqueInput!]
  create: [NewsReadingGroupItemCreateInput!]
  connect: [NewsReadingGroupItemWhereUniqueInput!]
}

input NewsReadingGroupUpdateArgs {
  where: NewsReadingGroupWhereUniqueInput!
  data: NewsReadingGroupUpdateInput!
}

input NewsReadingGroupCreateInput {
  name: String
  items: NewsReadingGroupItemRelateToManyForCreateInput
  createdAt: DateTime
  updatedAt: DateTime
}

input NewsReadingGroupItemRelateToManyForCreateInput {
  create: [NewsReadingGroupItemCreateInput!]
  connect: [NewsReadingGroupItemWhereUniqueInput!]
}

type NewsReadingGroupItem {
  id: ID!
  name: String
  embedCode: String
  order: Int
  createdAt: DateTime
  updatedAt: DateTime
}

input NewsReadingGroupItemWhereUniqueInput {
  id: ID
}

input NewsReadingGroupItemWhereInput {
  AND: [NewsReadingGroupItemWhereInput!]
  OR: [NewsReadingGroupItemWhereInput!]
  NOT: [NewsReadingGroupItemWhereInput!]
  id: IDFilter
  name: StringFilter
  embedCode: StringFilter
  order: IntNullableFilter
  createdAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
}

input IntNullableFilter {
  equals: Int
  in: [Int!]
  notIn: [Int!]
  lt: Int
  lte: Int
  gt: Int
  gte: Int
  not: IntNullableFilter
}

input NewsReadingGroupItemOrderByInput {
  id: OrderDirection
  name: OrderDirection
  embedCode: OrderDirection
  order: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
}

input NewsReadingGroupItemUpdateInput {
  name: String
  embedCode: String
  order: Int
  createdAt: DateTime
  updatedAt: DateTime
}

input NewsReadingGroupItemUpdateArgs {
  where: NewsReadingGroupItemWhereUniqueInput!
  data: NewsReadingGroupItemUpdateInput!
}

input NewsReadingGroupItemCreateInput {
  name: String
  embedCode: String
  order: Int
  createdAt: DateTime
  updatedAt: DateTime
}

type EditorPicksSetting {
  id: ID!
  name: String
  nameForCMS: String
  editorPicksOfPosts(where: PostWhereInput! = {}, orderBy: [PostOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: PostWhereUniqueInput): [Post!]
  editorPicksOfPostsCount(where: PostWhereInput! = {}): Int
  editorPicksOfPostsOrderJson: JSON
  editorPicksOfPostsOrdered(take: Int! = 12, skip: Int! = 0): [Post!]
  editorPicksOfProjects(where: ProjectWhereInput! = {}, orderBy: [ProjectOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: ProjectWhereUniqueInput): [Project!]
  editorPicksOfProjectsCount(where: ProjectWhereInput! = {}): Int
  editorPicksOfTags(where: TagWhereInput! = {}, orderBy: [TagOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: TagWhereUniqueInput): [Tag!]
  editorPicksOfTagsCount(where: TagWhereInput! = {}): Int
  createdAt: DateTime
  updatedAt: DateTime
}

input EditorPicksSettingWhereUniqueInput {
  id: ID
  name: String
}

input EditorPicksSettingWhereInput {
  AND: [EditorPicksSettingWhereInput!]
  OR: [EditorPicksSettingWhereInput!]
  NOT: [EditorPicksSettingWhereInput!]
  id: IDFilter
  name: StringFilter
  nameForCMS: StringFilter
  editorPicksOfPosts: PostManyRelationFilter
  editorPicksOfProjects: ProjectManyRelationFilter
  editorPicksOfTags: TagManyRelationFilter
  createdAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
}

input EditorPicksSettingOrderByInput {
  id: OrderDirection
  name: OrderDirection
  nameForCMS: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
}

input EditorPicksSettingUpdateInput {
  name: String
  nameForCMS: String
  editorPicksOfPosts: PostRelateToManyForUpdateInput
  editorPicksOfPostsOrderJson: JSON
  editorPicksOfProjects: ProjectRelateToManyForUpdateInput
  editorPicksOfTags: TagRelateToManyForUpdateInput
  createdAt: DateTime
  updatedAt: DateTime
}

input EditorPicksSettingUpdateArgs {
  where: EditorPicksSettingWhereUniqueInput!
  data: EditorPicksSettingUpdateInput!
}

input EditorPicksSettingCreateInput {
  name: String
  nameForCMS: String
  editorPicksOfPosts: PostRelateToManyForCreateInput
  editorPicksOfPostsOrderJson: JSON
  editorPicksOfProjects: ProjectRelateToManyForCreateInput
  editorPicksOfTags: TagRelateToManyForCreateInput
  createdAt: DateTime
  updatedAt: DateTime
}

type PDF {
  id: ID!
  name: String
  file: FileFieldOutput
  googleDrivePreviewLink: String
  description: String
  embeddedCode: String
  createdAt: DateTime
  updatedAt: DateTime
}

type FileFieldOutput {
  filename: String!
  filesize: Int!
  url: String!
}

input PDFWhereUniqueInput {
  id: ID
}

input PDFWhereInput {
  AND: [PDFWhereInput!]
  OR: [PDFWhereInput!]
  NOT: [PDFWhereInput!]
  id: IDFilter
  name: StringFilter
  googleDrivePreviewLink: StringFilter
  description: StringFilter
  createdAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
}

input PDFOrderByInput {
  id: OrderDirection
  name: OrderDirection
  googleDrivePreviewLink: OrderDirection
  description: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
}

input PDFUpdateInput {
  name: String
  file: FileFieldInput
  googleDrivePreviewLink: String
  description: String
  createdAt: DateTime
  updatedAt: DateTime
}

input FileFieldInput {
  upload: Upload!
}

input PDFUpdateArgs {
  where: PDFWhereUniqueInput!
  data: PDFUpdateInput!
}

input PDFCreateInput {
  name: String
  file: FileFieldInput
  googleDrivePreviewLink: String
  description: String
  createdAt: DateTime
  updatedAt: DateTime
}

type SVG {
  id: ID!
  name: String
  svgFile: FileFieldOutput
  authors(where: AuthorWhereInput! = {}, orderBy: [AuthorOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: AuthorWhereUniqueInput): [Author!]
  authorsCount(where: AuthorWhereInput! = {}): Int
  embeddedCode: String
  createdAt: DateTime
  updatedAt: DateTime
}

input SVGWhereUniqueInput {
  id: ID
}

input SVGWhereInput {
  AND: [SVGWhereInput!]
  OR: [SVGWhereInput!]
  NOT: [SVGWhereInput!]
  id: IDFilter
  name: StringFilter
  authors: AuthorManyRelationFilter
  createdAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
}

input SVGOrderByInput {
  id: OrderDirection
  name: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
}

input SVGUpdateInput {
  name: String
  svgFile: FileFieldInput
  authors: AuthorRelateToManyForUpdateInput
  createdAt: DateTime
  updatedAt: DateTime
}

input SVGUpdateArgs {
  where: SVGWhereUniqueInput!
  data: SVGUpdateInput!
}

input SVGCreateInput {
  name: String
  svgFile: FileFieldInput
  authors: AuthorRelateToManyForCreateInput
  createdAt: DateTime
  updatedAt: DateTime
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON @specifiedBy(url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf")

type Mutation {
  createUser(data: UserCreateInput!): User
  createUsers(data: [UserCreateInput!]!): [User]
  updateUser(where: UserWhereUniqueInput!, data: UserUpdateInput!): User
  updateUsers(data: [UserUpdateArgs!]!): [User]
  deleteUser(where: UserWhereUniqueInput!): User
  deleteUsers(where: [UserWhereUniqueInput!]!): [User]
  createPost(data: PostCreateInput!): Post
  createPosts(data: [PostCreateInput!]!): [Post]
  updatePost(where: PostWhereUniqueInput!, data: PostUpdateInput!): Post
  updatePosts(data: [PostUpdateArgs!]!): [Post]
  deletePost(where: PostWhereUniqueInput!): Post
  deletePosts(where: [PostWhereUniqueInput!]!): [Post]
  createPhoto(data: PhotoCreateInput!): Photo
  createPhotos(data: [PhotoCreateInput!]!): [Photo]
  updatePhoto(where: PhotoWhereUniqueInput!, data: PhotoUpdateInput!): Photo
  updatePhotos(data: [PhotoUpdateArgs!]!): [Photo]
  deletePhoto(where: PhotoWhereUniqueInput!): Photo
  deletePhotos(where: [PhotoWhereUniqueInput!]!): [Photo]
  createAuthor(data: AuthorCreateInput!): Author
  createAuthors(data: [AuthorCreateInput!]!): [Author]
  updateAuthor(where: AuthorWhereUniqueInput!, data: AuthorUpdateInput!): Author
  updateAuthors(data: [AuthorUpdateArgs!]!): [Author]
  deleteAuthor(where: AuthorWhereUniqueInput!): Author
  deleteAuthors(where: [AuthorWhereUniqueInput!]!): [Author]
  createProject(data: ProjectCreateInput!): Project
  createProjects(data: [ProjectCreateInput!]!): [Project]
  updateProject(where: ProjectWhereUniqueInput!, data: ProjectUpdateInput!): Project
  updateProjects(data: [ProjectUpdateArgs!]!): [Project]
  deleteProject(where: ProjectWhereUniqueInput!): Project
  deleteProjects(where: [ProjectWhereUniqueInput!]!): [Project]
  createProjectCategory(data: ProjectCategoryCreateInput!): ProjectCategory
  createProjectCategories(data: [ProjectCategoryCreateInput!]!): [ProjectCategory]
  updateProjectCategory(where: ProjectCategoryWhereUniqueInput!, data: ProjectCategoryUpdateInput!): ProjectCategory
  updateProjectCategories(data: [ProjectCategoryUpdateArgs!]!): [ProjectCategory]
  deleteProjectCategory(where: ProjectCategoryWhereUniqueInput!): ProjectCategory
  deleteProjectCategories(where: [ProjectCategoryWhereUniqueInput!]!): [ProjectCategory]
  createCategory(data: CategoryCreateInput!): Category
  createCategories(data: [CategoryCreateInput!]!): [Category]
  updateCategory(where: CategoryWhereUniqueInput!, data: CategoryUpdateInput!): Category
  updateCategories(data: [CategoryUpdateArgs!]!): [Category]
  deleteCategory(where: CategoryWhereUniqueInput!): Category
  deleteCategories(where: [CategoryWhereUniqueInput!]!): [Category]
  createSubcategory(data: SubcategoryCreateInput!): Subcategory
  createSubcategories(data: [SubcategoryCreateInput!]!): [Subcategory]
  updateSubcategory(where: SubcategoryWhereUniqueInput!, data: SubcategoryUpdateInput!): Subcategory
  updateSubcategories(data: [SubcategoryUpdateArgs!]!): [Subcategory]
  deleteSubcategory(where: SubcategoryWhereUniqueInput!): Subcategory
  deleteSubcategories(where: [SubcategoryWhereUniqueInput!]!): [Subcategory]
  createSubSubcategory(data: SubSubcategoryCreateInput!): SubSubcategory
  createSubSubcategories(data: [SubSubcategoryCreateInput!]!): [SubSubcategory]
  updateSubSubcategory(where: SubSubcategoryWhereUniqueInput!, data: SubSubcategoryUpdateInput!): SubSubcategory
  updateSubSubcategories(data: [SubSubcategoryUpdateArgs!]!): [SubSubcategory]
  deleteSubSubcategory(where: SubSubcategoryWhereUniqueInput!): SubSubcategory
  deleteSubSubcategories(where: [SubSubcategoryWhereUniqueInput!]!): [SubSubcategory]
  createTag(data: TagCreateInput!): Tag
  createTags(data: [TagCreateInput!]!): [Tag]
  updateTag(where: TagWhereUniqueInput!, data: TagUpdateInput!): Tag
  updateTags(data: [TagUpdateArgs!]!): [Tag]
  deleteTag(where: TagWhereUniqueInput!): Tag
  deleteTags(where: [TagWhereUniqueInput!]!): [Tag]
  createNewsReadingGroup(data: NewsReadingGroupCreateInput!): NewsReadingGroup
  createNewsReadingGroups(data: [NewsReadingGroupCreateInput!]!): [NewsReadingGroup]
  updateNewsReadingGroup(where: NewsReadingGroupWhereUniqueInput!, data: NewsReadingGroupUpdateInput!): NewsReadingGroup
  updateNewsReadingGroups(data: [NewsReadingGroupUpdateArgs!]!): [NewsReadingGroup]
  deleteNewsReadingGroup(where: NewsReadingGroupWhereUniqueInput!): NewsReadingGroup
  deleteNewsReadingGroups(where: [NewsReadingGroupWhereUniqueInput!]!): [NewsReadingGroup]
  createNewsReadingGroupItem(data: NewsReadingGroupItemCreateInput!): NewsReadingGroupItem
  createNewsReadingGroupItems(data: [NewsReadingGroupItemCreateInput!]!): [NewsReadingGroupItem]
  updateNewsReadingGroupItem(where: NewsReadingGroupItemWhereUniqueInput!, data: NewsReadingGroupItemUpdateInput!): NewsReadingGroupItem
  updateNewsReadingGroupItems(data: [NewsReadingGroupItemUpdateArgs!]!): [NewsReadingGroupItem]
  deleteNewsReadingGroupItem(where: NewsReadingGroupItemWhereUniqueInput!): NewsReadingGroupItem
  deleteNewsReadingGroupItems(where: [NewsReadingGroupItemWhereUniqueInput!]!): [NewsReadingGroupItem]
  createEditorPicksSetting(data: EditorPicksSettingCreateInput!): EditorPicksSetting
  createEditorPicksSettings(data: [EditorPicksSettingCreateInput!]!): [EditorPicksSetting]
  updateEditorPicksSetting(where: EditorPicksSettingWhereUniqueInput!, data: EditorPicksSettingUpdateInput!): EditorPicksSetting
  updateEditorPicksSettings(data: [EditorPicksSettingUpdateArgs!]!): [EditorPicksSetting]
  deleteEditorPicksSetting(where: EditorPicksSettingWhereUniqueInput!): EditorPicksSetting
  deleteEditorPicksSettings(where: [EditorPicksSettingWhereUniqueInput!]!): [EditorPicksSetting]
  createPDF(data: PDFCreateInput!): PDF
  createPDFS(data: [PDFCreateInput!]!): [PDF]
  updatePDF(where: PDFWhereUniqueInput!, data: PDFUpdateInput!): PDF
  updatePDFS(data: [PDFUpdateArgs!]!): [PDF]
  deletePDF(where: PDFWhereUniqueInput!): PDF
  deletePDFS(where: [PDFWhereUniqueInput!]!): [PDF]
  createSVG(data: SVGCreateInput!): SVG
  createSVGS(data: [SVGCreateInput!]!): [SVG]
  updateSVG(where: SVGWhereUniqueInput!, data: SVGUpdateInput!): SVG
  updateSVGS(data: [SVGUpdateArgs!]!): [SVG]
  deleteSVG(where: SVGWhereUniqueInput!): SVG
  deleteSVGS(where: [SVGWhereUniqueInput!]!): [SVG]
  endSession: Boolean!
  authenticateUserWithPassword(email: String!, password: String!): UserAuthenticationWithPasswordResult
  createInitialUser(data: CreateInitialUserInput!): UserAuthenticationWithPasswordSuccess!
}

union UserAuthenticationWithPasswordResult = UserAuthenticationWithPasswordSuccess | UserAuthenticationWithPasswordFailure

type UserAuthenticationWithPasswordSuccess {
  sessionToken: String!
  item: User!
}

type UserAuthenticationWithPasswordFailure {
  message: String!
}

input CreateInitialUserInput {
  name: String
  email: String
  password: String
  role: String
}

type Query {
  users(where: UserWhereInput! = {}, orderBy: [UserOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: UserWhereUniqueInput): [User!]
  user(where: UserWhereUniqueInput!): User
  usersCount(where: UserWhereInput! = {}): Int
  posts(where: PostWhereInput! = {}, orderBy: [PostOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: PostWhereUniqueInput): [Post!]
  post(where: PostWhereUniqueInput!): Post
  postsCount(where: PostWhereInput! = {}): Int
  photos(where: PhotoWhereInput! = {}, orderBy: [PhotoOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: PhotoWhereUniqueInput): [Photo!]
  photo(where: PhotoWhereUniqueInput!): Photo
  photosCount(where: PhotoWhereInput! = {}): Int
  authors(where: AuthorWhereInput! = {}, orderBy: [AuthorOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: AuthorWhereUniqueInput): [Author!]
  author(where: AuthorWhereUniqueInput!): Author
  authorsCount(where: AuthorWhereInput! = {}): Int
  projects(where: ProjectWhereInput! = {}, orderBy: [ProjectOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: ProjectWhereUniqueInput): [Project!]
  project(where: ProjectWhereUniqueInput!): Project
  projectsCount(where: ProjectWhereInput! = {}): Int
  projectCategories(where: ProjectCategoryWhereInput! = {}, orderBy: [ProjectCategoryOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: ProjectCategoryWhereUniqueInput): [ProjectCategory!]
  projectCategory(where: ProjectCategoryWhereUniqueInput!): ProjectCategory
  projectCategoriesCount(where: ProjectCategoryWhereInput! = {}): Int
  categories(where: CategoryWhereInput! = {}, orderBy: [CategoryOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: CategoryWhereUniqueInput): [Category!]
  category(where: CategoryWhereUniqueInput!): Category
  categoriesCount(where: CategoryWhereInput! = {}): Int
  subcategories(where: SubcategoryWhereInput! = {}, orderBy: [SubcategoryOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: SubcategoryWhereUniqueInput): [Subcategory!]
  subcategory(where: SubcategoryWhereUniqueInput!): Subcategory
  subcategoriesCount(where: SubcategoryWhereInput! = {}): Int
  subSubcategories(where: SubSubcategoryWhereInput! = {}, orderBy: [SubSubcategoryOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: SubSubcategoryWhereUniqueInput): [SubSubcategory!]
  subSubcategory(where: SubSubcategoryWhereUniqueInput!): SubSubcategory
  subSubcategoriesCount(where: SubSubcategoryWhereInput! = {}): Int
  tags(where: TagWhereInput! = {}, orderBy: [TagOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: TagWhereUniqueInput): [Tag!]
  tag(where: TagWhereUniqueInput!): Tag
  tagsCount(where: TagWhereInput! = {}): Int
  newsReadingGroups(where: NewsReadingGroupWhereInput! = {}, orderBy: [NewsReadingGroupOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: NewsReadingGroupWhereUniqueInput): [NewsReadingGroup!]
  newsReadingGroup(where: NewsReadingGroupWhereUniqueInput!): NewsReadingGroup
  newsReadingGroupsCount(where: NewsReadingGroupWhereInput! = {}): Int
  newsReadingGroupItems(where: NewsReadingGroupItemWhereInput! = {}, orderBy: [NewsReadingGroupItemOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: NewsReadingGroupItemWhereUniqueInput): [NewsReadingGroupItem!]
  newsReadingGroupItem(where: NewsReadingGroupItemWhereUniqueInput!): NewsReadingGroupItem
  newsReadingGroupItemsCount(where: NewsReadingGroupItemWhereInput! = {}): Int
  editorPicksSettings(where: EditorPicksSettingWhereInput! = {}, orderBy: [EditorPicksSettingOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: EditorPicksSettingWhereUniqueInput): [EditorPicksSetting!]
  editorPicksSetting(where: EditorPicksSettingWhereUniqueInput!): EditorPicksSetting
  editorPicksSettingsCount(where: EditorPicksSettingWhereInput! = {}): Int
  pDFS(where: PDFWhereInput! = {}, orderBy: [PDFOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: PDFWhereUniqueInput): [PDF!]
  pDF(where: PDFWhereUniqueInput!): PDF
  pDFSCount(where: PDFWhereInput! = {}): Int
  sVGS(where: SVGWhereInput! = {}, orderBy: [SVGOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: SVGWhereUniqueInput): [SVG!]
  sVG(where: SVGWhereUniqueInput!): SVG
  sVGSCount(where: SVGWhereInput! = {}): Int
  keystone: KeystoneMeta!
  authenticatedItem: AuthenticatedItem
}

union AuthenticatedItem = User

type KeystoneMeta {
  adminMeta: KeystoneAdminMeta!
}

type KeystoneAdminMeta {
  lists: [KeystoneAdminUIListMeta!]!
  list(key: String!): KeystoneAdminUIListMeta
}

type KeystoneAdminUIListMeta {
  key: String!
  itemQueryName: String!
  listQueryName: String!
  hideCreate: Boolean!
  hideDelete: Boolean!
  path: String!
  label: String!
  singular: String!
  plural: String!
  description: String
  initialColumns: [String!]!
  pageSize: Int!
  labelField: String!
  fields: [KeystoneAdminUIFieldMeta!]!
  groups: [KeystoneAdminUIFieldGroupMeta!]!
  initialSort: KeystoneAdminUISort
  isHidden: Boolean!
  isSingleton: Boolean!
}

type KeystoneAdminUIFieldMeta {
  path: String!
  label: String!
  description: String
  isOrderable: Boolean!
  isFilterable: Boolean!
  isNonNull: [KeystoneAdminUIFieldMetaIsNonNull!]
  fieldMeta: JSON
  viewsIndex: Int!
  customViewsIndex: Int
  createView: KeystoneAdminUIFieldMetaCreateView!
  listView: KeystoneAdminUIFieldMetaListView!
  itemView(id: ID): KeystoneAdminUIFieldMetaItemView
  search: QueryMode
}

enum KeystoneAdminUIFieldMetaIsNonNull {
  read
  create
  update
}

type KeystoneAdminUIFieldMetaCreateView {
  fieldMode: KeystoneAdminUIFieldMetaCreateViewFieldMode!
}

enum KeystoneAdminUIFieldMetaCreateViewFieldMode {
  edit
  hidden
}

type KeystoneAdminUIFieldMetaListView {
  fieldMode: KeystoneAdminUIFieldMetaListViewFieldMode!
}

enum KeystoneAdminUIFieldMetaListViewFieldMode {
  read
  hidden
}

type KeystoneAdminUIFieldMetaItemView {
  fieldMode: KeystoneAdminUIFieldMetaItemViewFieldMode
  fieldPosition: KeystoneAdminUIFieldMetaItemViewFieldPosition
}

enum KeystoneAdminUIFieldMetaItemViewFieldMode {
  edit
  read
  hidden
}

enum KeystoneAdminUIFieldMetaItemViewFieldPosition {
  form
  sidebar
}

type KeystoneAdminUIFieldGroupMeta {
  label: String!
  description: String
  fields: [KeystoneAdminUIFieldMeta!]!
}

type KeystoneAdminUISort {
  field: String!
  direction: KeystoneAdminUISortDirection!
}

enum KeystoneAdminUISortDirection {
  ASC
  DESC
}
