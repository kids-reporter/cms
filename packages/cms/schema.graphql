# This file is automatically generated by Keystone, do not modify it manually.
# Modify your Keystone config when you want to change this.

type Author {
  id: ID!
  name: String
  email: String
  bio: String
  posts(where: PostWhereInput! = {}, orderBy: [PostOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: PostWhereUniqueInput): [Post!]
  postsCount(where: PostWhereInput! = {}): Int
  createdAt: DateTime
  updatedAt: DateTime
}

scalar DateTime @specifiedBy(url: "https://datatracker.ietf.org/doc/html/rfc3339#section-5.6")

input AuthorWhereUniqueInput {
  id: ID
  email: String
}

input AuthorWhereInput {
  AND: [AuthorWhereInput!]
  OR: [AuthorWhereInput!]
  NOT: [AuthorWhereInput!]
  id: IDFilter
  name: StringFilter
  email: StringNullableFilter
  bio: StringFilter
  posts: PostManyRelationFilter
  createdAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
}

input IDFilter {
  equals: ID
  in: [ID!]
  notIn: [ID!]
  lt: ID
  lte: ID
  gt: ID
  gte: ID
  not: IDFilter
}

input StringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  mode: QueryMode
  not: NestedStringFilter
}

enum QueryMode {
  default
  insensitive
}

input NestedStringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringFilter
}

input StringNullableFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  mode: QueryMode
  not: NestedStringNullableFilter
}

input NestedStringNullableFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringNullableFilter
}

input PostManyRelationFilter {
  every: PostWhereInput
  some: PostWhereInput
  none: PostWhereInput
}

input DateTimeNullableFilter {
  equals: DateTime
  in: [DateTime!]
  notIn: [DateTime!]
  lt: DateTime
  lte: DateTime
  gt: DateTime
  gte: DateTime
  not: DateTimeNullableFilter
}

input AuthorOrderByInput {
  id: OrderDirection
  name: OrderDirection
  email: OrderDirection
  bio: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
}

enum OrderDirection {
  asc
  desc
}

input AuthorUpdateInput {
  name: String
  email: String
  bio: String
  posts: PostRelateToManyForUpdateInput
  createdAt: DateTime
  updatedAt: DateTime
}

input PostRelateToManyForUpdateInput {
  disconnect: [PostWhereUniqueInput!]
  set: [PostWhereUniqueInput!]
  create: [PostCreateInput!]
  connect: [PostWhereUniqueInput!]
}

input AuthorUpdateArgs {
  where: AuthorWhereUniqueInput!
  data: AuthorUpdateInput!
}

input AuthorCreateInput {
  name: String
  email: String
  bio: String
  posts: PostRelateToManyForCreateInput
  createdAt: DateTime
  updatedAt: DateTime
}

input PostRelateToManyForCreateInput {
  create: [PostCreateInput!]
  connect: [PostWhereUniqueInput!]
}

type Category {
  id: ID!
  slug: String
  title: String
  status: String
  heroImage: Photo
  ogTitle: String
  ogDescription: String
  ogImage: Photo
  subCategory(where: SubCategoryWhereInput! = {}, orderBy: [SubCategoryOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: SubCategoryWhereUniqueInput): [SubCategory!]
  subCategoryCount(where: SubCategoryWhereInput! = {}): Int
  relatedPost(where: PostWhereInput! = {}, orderBy: [PostOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: PostWhereUniqueInput): [Post!]
  relatedPostCount(where: PostWhereInput! = {}): Int
  createdAt: DateTime
  updatedAt: DateTime
}

input CategoryWhereUniqueInput {
  id: ID
  title: String
}

input CategoryWhereInput {
  AND: [CategoryWhereInput!]
  OR: [CategoryWhereInput!]
  NOT: [CategoryWhereInput!]
  id: IDFilter
  slug: StringFilter
  title: StringFilter
  status: StringNullableFilter
  heroImage: PhotoWhereInput
  ogTitle: StringFilter
  ogDescription: StringFilter
  ogImage: PhotoWhereInput
  subCategory: SubCategoryManyRelationFilter
  relatedPost: PostManyRelationFilter
  createdAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
}

input SubCategoryManyRelationFilter {
  every: SubCategoryWhereInput
  some: SubCategoryWhereInput
  none: SubCategoryWhereInput
}

input CategoryOrderByInput {
  id: OrderDirection
  slug: OrderDirection
  title: OrderDirection
  status: OrderDirection
  ogTitle: OrderDirection
  ogDescription: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
}

input CategoryUpdateInput {
  slug: String
  title: String
  status: String
  heroImage: PhotoRelateToOneForUpdateInput
  ogTitle: String
  ogDescription: String
  ogImage: PhotoRelateToOneForUpdateInput
  subCategory: SubCategoryRelateToManyForUpdateInput
  relatedPost: PostRelateToManyForUpdateInput
  createdAt: DateTime
  updatedAt: DateTime
}

input PhotoRelateToOneForUpdateInput {
  create: PhotoCreateInput
  connect: PhotoWhereUniqueInput
  disconnect: Boolean
}

input SubCategoryRelateToManyForUpdateInput {
  disconnect: [SubCategoryWhereUniqueInput!]
  set: [SubCategoryWhereUniqueInput!]
  create: [SubCategoryCreateInput!]
  connect: [SubCategoryWhereUniqueInput!]
}

input CategoryUpdateArgs {
  where: CategoryWhereUniqueInput!
  data: CategoryUpdateInput!
}

input CategoryCreateInput {
  slug: String
  title: String
  status: String
  heroImage: PhotoRelateToOneForCreateInput
  ogTitle: String
  ogDescription: String
  ogImage: PhotoRelateToOneForCreateInput
  subCategory: SubCategoryRelateToManyForCreateInput
  relatedPost: PostRelateToManyForCreateInput
  createdAt: DateTime
  updatedAt: DateTime
}

input PhotoRelateToOneForCreateInput {
  create: PhotoCreateInput
  connect: PhotoWhereUniqueInput
}

input SubCategoryRelateToManyForCreateInput {
  create: [SubCategoryCreateInput!]
  connect: [SubCategoryWhereUniqueInput!]
}

type Photo {
  id: ID!
  name: String
  imageFile: ImageFieldOutput
  createdAt: DateTime
  updatedAt: DateTime
  resized: ResizedImages
}

type ImageFieldOutput {
  id: ID!
  filesize: Int!
  width: Int!
  height: Int!
  extension: ImageExtension!
  url: String!
}

enum ImageExtension {
  jpg
  png
  webp
  gif
}

type ResizedImages {
  original: String
  tiny: String
  small: String
  medium: String
  large: String
}

input PhotoWhereUniqueInput {
  id: ID
}

input PhotoWhereInput {
  AND: [PhotoWhereInput!]
  OR: [PhotoWhereInput!]
  NOT: [PhotoWhereInput!]
  id: IDFilter
  name: StringFilter
  createdAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
}

input PhotoOrderByInput {
  id: OrderDirection
  name: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
}

input PhotoUpdateInput {
  name: String
  imageFile: ImageFieldInput
  createdAt: DateTime
  updatedAt: DateTime
}

input ImageFieldInput {
  upload: Upload!
}

"""The `Upload` scalar type represents a file upload."""
scalar Upload

input PhotoUpdateArgs {
  where: PhotoWhereUniqueInput!
  data: PhotoUpdateInput!
}

input PhotoCreateInput {
  name: String
  imageFile: ImageFieldInput
  createdAt: DateTime
  updatedAt: DateTime
}

type Post {
  id: ID!
  slug: String
  name: String
  subtitle: String
  status: String
  publishedDate: DateTime
  writers(where: AuthorWhereInput! = {}, orderBy: [AuthorOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: AuthorWhereUniqueInput): [Author!]
  writersCount(where: AuthorWhereInput! = {}): Int
  manualOrderOfWriters: JSON
  photographers(where: AuthorWhereInput! = {}, orderBy: [AuthorOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: AuthorWhereUniqueInput): [Author!]
  photographersCount(where: AuthorWhereInput! = {}): Int
  manualOrderOfPhotographers: JSON
  editors(where: AuthorWhereInput! = {}, orderBy: [AuthorOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: AuthorWhereUniqueInput): [Author!]
  editorsCount(where: AuthorWhereInput! = {}): Int
  manualOrderOfEditors: JSON
  designers(where: AuthorWhereInput! = {}, orderBy: [AuthorOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: AuthorWhereUniqueInput): [Author!]
  designersCount(where: AuthorWhereInput! = {}): Int
  manualOrderOfDesigners: JSON
  engineers(where: AuthorWhereInput! = {}, orderBy: [AuthorOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: AuthorWhereUniqueInput): [Author!]
  engineersCount(where: AuthorWhereInput! = {}): Int
  manualOrderOfEngineers: JSON
  reviewers(where: AuthorWhereInput! = {}, orderBy: [AuthorOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: AuthorWhereUniqueInput): [Author!]
  reviewersCount(where: AuthorWhereInput! = {}): Int
  manualOrderOfReviewers: JSON
  otherByline: String
  heroImage: Photo
  heroCaption: String
  heroImageSize: String
  brief: JSON
  content: JSON
  readingTime: Int
  relatedPosts(where: PostWhereInput! = {}, orderBy: [PostOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: PostWhereUniqueInput): [Post!]
  relatedPostsCount(where: PostWhereInput! = {}): Int
  manualOrderOfRelatedPosts: JSON
  ogTitle: String
  ogDescription: String
  ogImage: Photo
  createdAt: DateTime
  updatedAt: DateTime
  writersInInputOrder: [Author]
  photographersInInputOrder: [Author]
  designersInInputOrder: [Author]
  engineersInInputOrder: [Author]
  reviewersInInputOrder: [Author]
  editorsInInputOrder: [Author]
  relatedPostsInInputOrder: [Post]
}

input PostWhereUniqueInput {
  id: ID
  slug: String
}

input PostWhereInput {
  AND: [PostWhereInput!]
  OR: [PostWhereInput!]
  NOT: [PostWhereInput!]
  id: IDFilter
  slug: StringFilter
  name: StringFilter
  subtitle: StringFilter
  status: StringNullableFilter
  publishedDate: DateTimeNullableFilter
  writers: AuthorManyRelationFilter
  photographers: AuthorManyRelationFilter
  editors: AuthorManyRelationFilter
  designers: AuthorManyRelationFilter
  engineers: AuthorManyRelationFilter
  reviewers: AuthorManyRelationFilter
  otherByline: StringFilter
  heroImage: PhotoWhereInput
  heroCaption: StringFilter
  heroImageSize: StringNullableFilter
  readingTime: IntNullableFilter
  relatedPosts: PostManyRelationFilter
  ogTitle: StringFilter
  ogDescription: StringFilter
  ogImage: PhotoWhereInput
  createdAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
}

input AuthorManyRelationFilter {
  every: AuthorWhereInput
  some: AuthorWhereInput
  none: AuthorWhereInput
}

input IntNullableFilter {
  equals: Int
  in: [Int!]
  notIn: [Int!]
  lt: Int
  lte: Int
  gt: Int
  gte: Int
  not: IntNullableFilter
}

input PostOrderByInput {
  id: OrderDirection
  slug: OrderDirection
  name: OrderDirection
  subtitle: OrderDirection
  status: OrderDirection
  publishedDate: OrderDirection
  otherByline: OrderDirection
  heroCaption: OrderDirection
  heroImageSize: OrderDirection
  readingTime: OrderDirection
  ogTitle: OrderDirection
  ogDescription: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
}

input PostUpdateInput {
  slug: String
  name: String
  subtitle: String
  status: String
  publishedDate: DateTime
  writers: AuthorRelateToManyForUpdateInput
  manualOrderOfWriters: JSON
  photographers: AuthorRelateToManyForUpdateInput
  manualOrderOfPhotographers: JSON
  editors: AuthorRelateToManyForUpdateInput
  manualOrderOfEditors: JSON
  designers: AuthorRelateToManyForUpdateInput
  manualOrderOfDesigners: JSON
  engineers: AuthorRelateToManyForUpdateInput
  manualOrderOfEngineers: JSON
  reviewers: AuthorRelateToManyForUpdateInput
  manualOrderOfReviewers: JSON
  otherByline: String
  heroImage: PhotoRelateToOneForUpdateInput
  heroCaption: String
  heroImageSize: String
  brief: JSON
  content: JSON
  readingTime: Int
  relatedPosts: PostRelateToManyForUpdateInput
  manualOrderOfRelatedPosts: JSON
  ogTitle: String
  ogDescription: String
  ogImage: PhotoRelateToOneForUpdateInput
  createdAt: DateTime
  updatedAt: DateTime
}

input AuthorRelateToManyForUpdateInput {
  disconnect: [AuthorWhereUniqueInput!]
  set: [AuthorWhereUniqueInput!]
  create: [AuthorCreateInput!]
  connect: [AuthorWhereUniqueInput!]
}

input PostUpdateArgs {
  where: PostWhereUniqueInput!
  data: PostUpdateInput!
}

input PostCreateInput {
  slug: String
  name: String
  subtitle: String
  status: String
  publishedDate: DateTime
  writers: AuthorRelateToManyForCreateInput
  manualOrderOfWriters: JSON
  photographers: AuthorRelateToManyForCreateInput
  manualOrderOfPhotographers: JSON
  editors: AuthorRelateToManyForCreateInput
  manualOrderOfEditors: JSON
  designers: AuthorRelateToManyForCreateInput
  manualOrderOfDesigners: JSON
  engineers: AuthorRelateToManyForCreateInput
  manualOrderOfEngineers: JSON
  reviewers: AuthorRelateToManyForCreateInput
  manualOrderOfReviewers: JSON
  otherByline: String
  heroImage: PhotoRelateToOneForCreateInput
  heroCaption: String
  heroImageSize: String
  brief: JSON
  content: JSON
  readingTime: Int
  relatedPosts: PostRelateToManyForCreateInput
  manualOrderOfRelatedPosts: JSON
  ogTitle: String
  ogDescription: String
  ogImage: PhotoRelateToOneForCreateInput
  createdAt: DateTime
  updatedAt: DateTime
}

input AuthorRelateToManyForCreateInput {
  create: [AuthorCreateInput!]
  connect: [AuthorWhereUniqueInput!]
}

type SubCategory {
  id: ID!
  slug: String
  title: String
  status: String
  category: Category
  relatedPost(where: PostWhereInput! = {}, orderBy: [PostOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: PostWhereUniqueInput): [Post!]
  relatedPostCount(where: PostWhereInput! = {}): Int
  createdAt: DateTime
  updatedAt: DateTime
}

input SubCategoryWhereUniqueInput {
  id: ID
  title: String
}

input SubCategoryWhereInput {
  AND: [SubCategoryWhereInput!]
  OR: [SubCategoryWhereInput!]
  NOT: [SubCategoryWhereInput!]
  id: IDFilter
  slug: StringFilter
  title: StringFilter
  status: StringNullableFilter
  category: CategoryWhereInput
  relatedPost: PostManyRelationFilter
  createdAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
}

input SubCategoryOrderByInput {
  id: OrderDirection
  slug: OrderDirection
  title: OrderDirection
  status: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
}

input SubCategoryUpdateInput {
  slug: String
  title: String
  status: String
  category: CategoryRelateToOneForUpdateInput
  relatedPost: PostRelateToManyForUpdateInput
  createdAt: DateTime
  updatedAt: DateTime
}

input CategoryRelateToOneForUpdateInput {
  create: CategoryCreateInput
  connect: CategoryWhereUniqueInput
  disconnect: Boolean
}

input SubCategoryUpdateArgs {
  where: SubCategoryWhereUniqueInput!
  data: SubCategoryUpdateInput!
}

input SubCategoryCreateInput {
  slug: String
  title: String
  status: String
  category: CategoryRelateToOneForCreateInput
  relatedPost: PostRelateToManyForCreateInput
  createdAt: DateTime
  updatedAt: DateTime
}

input CategoryRelateToOneForCreateInput {
  create: CategoryCreateInput
  connect: CategoryWhereUniqueInput
}

type User {
  id: ID!
  name: String
  email: String
  password: PasswordState
  role: String
  isProtected: Boolean
  createdAt: DateTime
  updatedAt: DateTime
}

type PasswordState {
  isSet: Boolean!
}

input UserWhereUniqueInput {
  id: ID
  email: String
}

input UserWhereInput {
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
  id: IDFilter
  name: StringFilter
  email: StringFilter
  role: StringFilter
  isProtected: BooleanFilter
  createdAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
}

input BooleanFilter {
  equals: Boolean
  not: BooleanFilter
}

input UserOrderByInput {
  id: OrderDirection
  name: OrderDirection
  email: OrderDirection
  role: OrderDirection
  isProtected: OrderDirection
  createdAt: OrderDirection
  updatedAt: OrderDirection
}

input UserUpdateInput {
  name: String
  email: String
  password: String
  role: String
  isProtected: Boolean
  createdAt: DateTime
  updatedAt: DateTime
}

input UserUpdateArgs {
  where: UserWhereUniqueInput!
  data: UserUpdateInput!
}

input UserCreateInput {
  name: String
  email: String
  password: String
  role: String
  isProtected: Boolean
  createdAt: DateTime
  updatedAt: DateTime
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON @specifiedBy(url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf")

type Mutation {
  createAuthor(data: AuthorCreateInput!): Author
  createAuthors(data: [AuthorCreateInput!]!): [Author]
  updateAuthor(where: AuthorWhereUniqueInput!, data: AuthorUpdateInput!): Author
  updateAuthors(data: [AuthorUpdateArgs!]!): [Author]
  deleteAuthor(where: AuthorWhereUniqueInput!): Author
  deleteAuthors(where: [AuthorWhereUniqueInput!]!): [Author]
  createCategory(data: CategoryCreateInput!): Category
  createCategories(data: [CategoryCreateInput!]!): [Category]
  updateCategory(where: CategoryWhereUniqueInput!, data: CategoryUpdateInput!): Category
  updateCategories(data: [CategoryUpdateArgs!]!): [Category]
  deleteCategory(where: CategoryWhereUniqueInput!): Category
  deleteCategories(where: [CategoryWhereUniqueInput!]!): [Category]
  createPhoto(data: PhotoCreateInput!): Photo
  createPhotos(data: [PhotoCreateInput!]!): [Photo]
  updatePhoto(where: PhotoWhereUniqueInput!, data: PhotoUpdateInput!): Photo
  updatePhotos(data: [PhotoUpdateArgs!]!): [Photo]
  deletePhoto(where: PhotoWhereUniqueInput!): Photo
  deletePhotos(where: [PhotoWhereUniqueInput!]!): [Photo]
  createPost(data: PostCreateInput!): Post
  createPosts(data: [PostCreateInput!]!): [Post]
  updatePost(where: PostWhereUniqueInput!, data: PostUpdateInput!): Post
  updatePosts(data: [PostUpdateArgs!]!): [Post]
  deletePost(where: PostWhereUniqueInput!): Post
  deletePosts(where: [PostWhereUniqueInput!]!): [Post]
  createSubCategory(data: SubCategoryCreateInput!): SubCategory
  createSubCategories(data: [SubCategoryCreateInput!]!): [SubCategory]
  updateSubCategory(where: SubCategoryWhereUniqueInput!, data: SubCategoryUpdateInput!): SubCategory
  updateSubCategories(data: [SubCategoryUpdateArgs!]!): [SubCategory]
  deleteSubCategory(where: SubCategoryWhereUniqueInput!): SubCategory
  deleteSubCategories(where: [SubCategoryWhereUniqueInput!]!): [SubCategory]
  createUser(data: UserCreateInput!): User
  createUsers(data: [UserCreateInput!]!): [User]
  updateUser(where: UserWhereUniqueInput!, data: UserUpdateInput!): User
  updateUsers(data: [UserUpdateArgs!]!): [User]
  deleteUser(where: UserWhereUniqueInput!): User
  deleteUsers(where: [UserWhereUniqueInput!]!): [User]
  endSession: Boolean!
  authenticateUserWithPassword(email: String!, password: String!): UserAuthenticationWithPasswordResult
  createInitialUser(data: CreateInitialUserInput!): UserAuthenticationWithPasswordSuccess!
}

union UserAuthenticationWithPasswordResult = UserAuthenticationWithPasswordSuccess | UserAuthenticationWithPasswordFailure

type UserAuthenticationWithPasswordSuccess {
  sessionToken: String!
  item: User!
}

type UserAuthenticationWithPasswordFailure {
  message: String!
}

input CreateInitialUserInput {
  name: String
  email: String
  password: String
  role: String
}

type Query {
  authors(where: AuthorWhereInput! = {}, orderBy: [AuthorOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: AuthorWhereUniqueInput): [Author!]
  author(where: AuthorWhereUniqueInput!): Author
  authorsCount(where: AuthorWhereInput! = {}): Int
  categories(where: CategoryWhereInput! = {}, orderBy: [CategoryOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: CategoryWhereUniqueInput): [Category!]
  category(where: CategoryWhereUniqueInput!): Category
  categoriesCount(where: CategoryWhereInput! = {}): Int
  photos(where: PhotoWhereInput! = {}, orderBy: [PhotoOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: PhotoWhereUniqueInput): [Photo!]
  photo(where: PhotoWhereUniqueInput!): Photo
  photosCount(where: PhotoWhereInput! = {}): Int
  posts(where: PostWhereInput! = {}, orderBy: [PostOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: PostWhereUniqueInput): [Post!]
  post(where: PostWhereUniqueInput!): Post
  postsCount(where: PostWhereInput! = {}): Int
  subCategories(where: SubCategoryWhereInput! = {}, orderBy: [SubCategoryOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: SubCategoryWhereUniqueInput): [SubCategory!]
  subCategory(where: SubCategoryWhereUniqueInput!): SubCategory
  subCategoriesCount(where: SubCategoryWhereInput! = {}): Int
  users(where: UserWhereInput! = {}, orderBy: [UserOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: UserWhereUniqueInput): [User!]
  user(where: UserWhereUniqueInput!): User
  usersCount(where: UserWhereInput! = {}): Int
  keystone: KeystoneMeta!
  authenticatedItem: AuthenticatedItem
}

union AuthenticatedItem = User

type KeystoneMeta {
  adminMeta: KeystoneAdminMeta!
}

type KeystoneAdminMeta {
  lists: [KeystoneAdminUIListMeta!]!
  list(key: String!): KeystoneAdminUIListMeta
}

type KeystoneAdminUIListMeta {
  key: String!
  itemQueryName: String!
  listQueryName: String!
  hideCreate: Boolean!
  hideDelete: Boolean!
  path: String!
  label: String!
  singular: String!
  plural: String!
  description: String
  initialColumns: [String!]!
  pageSize: Int!
  labelField: String!
  fields: [KeystoneAdminUIFieldMeta!]!
  groups: [KeystoneAdminUIFieldGroupMeta!]!
  initialSort: KeystoneAdminUISort
  isHidden: Boolean!
  isSingleton: Boolean!
}

type KeystoneAdminUIFieldMeta {
  path: String!
  label: String!
  description: String
  isOrderable: Boolean!
  isFilterable: Boolean!
  isNonNull: [KeystoneAdminUIFieldMetaIsNonNull!]
  fieldMeta: JSON
  viewsIndex: Int!
  customViewsIndex: Int
  createView: KeystoneAdminUIFieldMetaCreateView!
  listView: KeystoneAdminUIFieldMetaListView!
  itemView(id: ID): KeystoneAdminUIFieldMetaItemView
  search: QueryMode
}

enum KeystoneAdminUIFieldMetaIsNonNull {
  read
  create
  update
}

type KeystoneAdminUIFieldMetaCreateView {
  fieldMode: KeystoneAdminUIFieldMetaCreateViewFieldMode!
}

enum KeystoneAdminUIFieldMetaCreateViewFieldMode {
  edit
  hidden
}

type KeystoneAdminUIFieldMetaListView {
  fieldMode: KeystoneAdminUIFieldMetaListViewFieldMode!
}

enum KeystoneAdminUIFieldMetaListViewFieldMode {
  read
  hidden
}

type KeystoneAdminUIFieldMetaItemView {
  fieldMode: KeystoneAdminUIFieldMetaItemViewFieldMode
  fieldPosition: KeystoneAdminUIFieldMetaItemViewFieldPosition
}

enum KeystoneAdminUIFieldMetaItemViewFieldMode {
  edit
  read
  hidden
}

enum KeystoneAdminUIFieldMetaItemViewFieldPosition {
  form
  sidebar
}

type KeystoneAdminUIFieldGroupMeta {
  label: String!
  description: String
  fields: [KeystoneAdminUIFieldMeta!]!
}

type KeystoneAdminUISort {
  field: String!
  direction: KeystoneAdminUISortDirection!
}

enum KeystoneAdminUISortDirection {
  ASC
  DESC
}
